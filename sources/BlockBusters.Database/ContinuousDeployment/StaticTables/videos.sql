
--MERGE generated by 'sp_generate_merge' stored procedure
--Originally by Vyas (http://vyaskn.tripod.com/code): sp_generate_inserts (build 22)
--Adapted for SQL Server 2008+ by Daniel Nolan (https://twitter.com/dnlnln)

SET NOCOUNT ON

SET IDENTITY_INSERT [videos] ON

DECLARE @mergeOutput TABLE ( [DMLAction] VARCHAR(6) );
MERGE INTO [videos] AS [Target]
USING (VALUES
  (1,N'Mr. Bean',1500,N'/dist/video_thumb/mr_bean.jpg',N'Bumbling, childlike Mr. Bean has trouble completing the simplest of day-to-day tasks, but his perseverance and resourcefulness frequently allow him to find ingenious ways around problems.')
  ,(2,N'The Shawshank Redemption',142,N'/dist/video_thumb/the_shawshank_redemption.jpg',N'Over the course of several years, two convicts form a friendship, seeking consolation and, eventually, redemption through basic compassion.')
  ,(3,N'Schindler''s List',195,N'/dist/video_thumb/schindlers_list.jpg',N'In German-occupied Poland during World War II, industrialist Oskar Schindler gradually becomes concerned for his Jewish workforce after witnessing their persecution by the Nazis.')
  ,(4,N'Inception',148,N'/dist/video_thumb/inception.jpg',N'A thief who steals corporate secrets through the use of dream-sharing technology is given the inverse task of planting an idea into the mind of a C.E.O., but his tragic past may doom the project and his team to disaster.')
  ,(5,N'Se7en',127,N'/dist/video_thumb/se7en.jpg',N'Two detectives, a rookie and a veteran, hunt a serial killer who uses the seven deadly sins as his motives.')
  ,(6,N'The Green Mile',189,N'/dist/video_thumb/the_green_mile.jpg',N'A tale set on death row, where gentle giant John Coffey possesses the mysterious power to heal people''s ailments. When the lead guard, Paul Edgecombe, recognizes John''s gift, he tries to help stave off the condemned man''s execution.')
) AS [Source] ([id],[title],[duration],[image_url],[description])
ON ([Target].[id] = [Source].[id])
WHEN MATCHED AND (
	NULLIF([Source].[title], [Target].[title]) IS NOT NULL OR NULLIF([Target].[title], [Source].[title]) IS NOT NULL OR 
	NULLIF([Source].[duration], [Target].[duration]) IS NOT NULL OR NULLIF([Target].[duration], [Source].[duration]) IS NOT NULL OR 
	NULLIF([Source].[image_url], [Target].[image_url]) IS NOT NULL OR NULLIF([Target].[image_url], [Source].[image_url]) IS NOT NULL OR 
	NULLIF([Source].[description], [Target].[description]) IS NOT NULL OR NULLIF([Target].[description], [Source].[description]) IS NOT NULL) THEN
 UPDATE SET
  [Target].[title] = [Source].[title], 
  [Target].[duration] = [Source].[duration], 
  [Target].[image_url] = [Source].[image_url], 
  [Target].[description] = [Source].[description]
WHEN NOT MATCHED BY TARGET THEN
 INSERT([id],[title],[duration],[image_url],[description])
 VALUES([Source].[id],[Source].[title],[Source].[duration],[Source].[image_url],[Source].[description])
WHEN NOT MATCHED BY SOURCE THEN 
 DELETE
OUTPUT $action INTO @mergeOutput;

DECLARE @mergeError int
 , @mergeCount int, @mergeCountIns int, @mergeCountUpd int, @mergeCountDel int
SELECT @mergeError = @@ERROR
SELECT @mergeCount = COUNT(1), @mergeCountIns = SUM(IIF([DMLAction] = 'INSERT', 1, 0)), @mergeCountUpd = SUM(IIF([DMLAction] = 'UPDATE', 1, 0)), @mergeCountDel = SUM (IIF([DMLAction] = 'DELETE', 1, 0)) FROM @mergeOutput
IF @mergeError != 0
 BEGIN
 PRINT 'ERROR OCCURRED IN MERGE FOR [videos]. Rows affected: ' + CAST(@mergeCount AS VARCHAR(100)); -- SQL should always return zero rows affected
 END
ELSE
 BEGIN
 PRINT '[videos] rows affected by MERGE: ' + CAST(COALESCE(@mergeCount,0) AS VARCHAR(100)) + ' (Inserted: ' + CAST(COALESCE(@mergeCountIns,0) AS VARCHAR(100)) + '; Updated: ' + CAST(COALESCE(@mergeCountUpd,0) AS VARCHAR(100)) + '; Deleted: ' + CAST(COALESCE(@mergeCountDel,0) AS VARCHAR(100)) + ')' ;
 END
GO



SET IDENTITY_INSERT [videos] OFF
SET NOCOUNT OFF
GO
